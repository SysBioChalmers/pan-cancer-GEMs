require(ade4)
?dudi.pca
###Define core vs. contextual rxns in cancer GEMs vs. normal GEMs
rm(list=ls())
setwd("~/Box Sync/3rd Semester (May 2013 - November 2013)/Projects/RxnLands/Codes/analyzeGEMs/RxnsCoreVsPan")
require(boot)
library(gplots)
library(ggplot2)
require(RColorBrewer)
require(vioplot)
#Load: gene expression, models (in terms of rxn and gene inclusion matrices), HMR2 gpr and rxns
load("../../data/preprocessed.RData")
rxnIncMatFile <- c("../rxnInclMat.txt")
rxnInclMat    <- read.delim(rxnIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
rxnInclMat    <- rxnInclMat[,-grep("X.1",colnames(rxnInclMat))]
geneIncMatFile <- c("../geneInclMat.txt")
geneInclMat    <- read.delim(geneIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
geneInclMat    <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
HMR2.rxnTable <- read.delim("../../docs/cHMR3765_rxnTable.txt")
HMR2.gpr  <- read.delim("../../docs/cHMR3765_rxnGeneMatrix.txt")
rownames(HMR2.gpr)<-HMR2.gpr[,1]
HMR2.gpr <- HMR2.gpr[,-c(1,ncol(HMR2.gpr))]
#Param
nCancerTypes    <- 13
percSampleWRxns <- 0.95
cols            <- colorRampPalette(brewer.pal(12, "Set3"))(nCancerTypes)
#1: Preprocess
### Assign each model a cancer type
PSID         <- rownames(y$samples)
PSID.s       <- gsub(pattern="-",replacement=".",x=PSID)
filter       <- PSID.s%in%colnames(rxnInclMat)
mapper       <- match(colnames(rxnInclMat),PSID.s[filter])
fGlobalCT.m  <- fGlobalCT[filter][mapper]
names(fGlobalCT.m)  <- PSID.s[filter][mapper]
#2: How many n° rxns per model?
GEMS.rxnXPSID <- apply(rxnInclMat==1,2,sum) #rxnInclMat=1 indicates presence of the rxn in the model, 0 otherwise
par(mfrow=c(1,2))
boxplot2(GEMS.rxnXPSID ~ fGlobalCT.m,col=cols,ylim=c(0,max(GEMS.rxnXPSID)),
ylab="N° reactions in the model",las=2)
vioplot(GEMS.rxnXPSID,col="Grey",names = "ALL",ylim=c(0,max(GEMS.rxnXPSID)))
par(mfrow=c(1,1))
#2bis: How many n° genes per model?
GEMS.geneXPSID <- apply(geneInclMat==1,2,sum) #geneInclMat=1 indicates presence of the rxn in the model, 0 otherwise
par(mfrow=c(1,2))
boxplot2(GEMS.geneXPSID ~ fGlobalCT.m,col=cols,ylim=c(0,max(GEMS.geneXPSID)),
ylab="N° genes in the model",las=2,names=toupper(levels(fGlobalCT.m)))
vioplot(GEMS.geneXPSID,col="Grey",names = "ALL",ylim=c(0,max(GEMS.geneXPSID)))
par(mfrow=c(1,1))
#3: How many models have a given rxn?
nModelsXRxn      <- apply(rxnInclMat==1,1,sum)
nModelsXRxn.perc <- nModelsXRxn/ncol(rxnInclMat)
barplot(nModelsXRxn.perc[order(nModelsXRxn.perc)],names.arg = NA,border=NULL,
xlab="HMR2 reactions", ylab="Fraction of models with the reaction")
# #3bis: When does the fraction of models with a given rxn flattens?
# l          <- lowess(nModelsXRxn.perc[order(nModelsXRxn.perc)],f=1/50)
# lines(l,col="green")
# derivative <- l$x
# slope.diff <- l$x
# for (i in 2:length(nModelsXRxn.perc)){
#   derivative[i] <- (l$y[i]-l$y[i-1])/(l$x[i]-l$x[i-1])
#   if (i==2){next}
#   slope.diff[i] <- abs(derivative[i]-derivative[i-1])}
# slope.diff[1:length(nModelsXRxn.perc)*0.9] <-0
# nModelsXRxn.perc.opt <- l$y[which.max(slope.diff)]
# abline(h=nModelsXRxn.perc.opt,col="red")
#4: How many rxns are declared core or context given a threshold for presence in x% of the models?
percsSampleWRxns <- c(seq(0.5,0.90,by = 0.05),
seq(0.91,0.99,by = 0.01),
seq(0.991,1,by = 0.001))
nRxnsClassified  <- matrix(0,nrow=3,ncol=length(percsSampleWRxns),
dimnames=list(c("N°core","N°context","N°absent"),
paste0("Core@",percsSampleWRxns)))
for (perc in percsSampleWRxns){
rxns.core       <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc>perc]),])
rxns.context    <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc<=perc&nModelsXRxn.perc>0]),])
rxns.abs        <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc==0]),])
nRxnsClassified[,paste0("Core@",perc)] <- rbind(nrow(rxns.core),
nrow(rxns.context),
nrow(rxns.abs))}
barplot(nRxnsClassified,beside = F,las=2,ylab="N° rxns per group")
#5: Establish classification - Let's settle for 0.95
rxns.core <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc>percSampleWRxns]),],"Type"="Core")
rxns.cntx <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc<=percSampleWRxns&nModelsXRxn.perc>0]),],"Type"="Pan","Class"="Facultative")
rxns.absn <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc==0]),],"Type"="Pan","Class"="Absent")
#6: Bootstrap statistics
nbootstraps <- 1000
n.core    <- function(modelsxrxn,i) sum(modelsxrxn[i]>percSampleWRxns)
n.core.bs <- boot(nModelsXRxn.perc,statistic = n.core,R = nbootstraps)
n.core.ci <- boot.ci(n.core.bs,type="basic")
n.cntx    <- function(modelsxrxn,i) sum(modelsxrxn[i]<percSampleWRxns & modelsxrxn[i]>0)
n.cntx.bs <- boot(nModelsXRxn.perc,statistic = n.cntx,R = nbootstraps)
n.cntx.ci <- boot.ci(n.cntx.bs,type="basic")
n.absn    <- function(modelsxrxn,i) sum(modelsxrxn[i]==0)
n.absn.bs <- boot(nModelsXRxn.perc,statistic = n.absn,R = nbootstraps)
n.absn.ci <- boot.ci(n.absn.bs,type="basic")
Define core vs. contextual rxns in cancer GEMs vs. normal GEMs
rm(list=ls())
setwd("~/Documents/Academia/Projects/RxnLands/Codes/analyzeGEMs/RxnsCoreVsPan")
require(boot)
library(gplots)
library(ggplot2)
require(RColorBrewer)
require(vioplot)
#Load: gene expression, models (in terms of rxn and gene inclusion matrices), HMR2 gpr and rxns
load("../../data/preprocessed.RData")
rxnIncMatFile <- c("../rxnInclMat.txt")
rxnInclMat    <- read.delim(rxnIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
rxnInclMat    <- rxnInclMat[,-grep("X.1",colnames(rxnInclMat))]
geneIncMatFile <- c("../geneInclMat.txt")
geneInclMat    <- read.delim(geneIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
geneInclMat    <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
HMR2.rxnTable <- read.delim("../../docs/cHMR3765_rxnTable.txt")
HMR2.gpr  <- read.delim("../../docs/cHMR3765_rxnGeneMatrix.txt")
rownames(HMR2.gpr)<-HMR2.gpr[,1]
HMR2.gpr <- HMR2.gpr[,-c(1,ncol(HMR2.gpr))]
#Param
nCancerTypes    <- 13
percSampleWRxns <- 0.95
cols            <- colorRampPalette(brewer.pal(12, "Set3"))(nCancerTypes)
#1: Preprocess
### Assign each model a cancer type
PSID         <- rownames(y$samples)
PSID.s       <- gsub(pattern="-",replacement=".",x=PSID)
filter       <- PSID.s%in%colnames(rxnInclMat)
mapper       <- match(colnames(rxnInclMat),PSID.s[filter])
fGlobalCT.m  <- fGlobalCT[filter][mapper]
names(fGlobalCT.m)  <- PSID.s[filter][mapper]
#2: How many n° rxns per model?
GEMS.rxnXPSID <- apply(rxnInclMat==1,2,sum) #rxnInclMat=1 indicates presence of the rxn in the model, 0 otherwise
par(mfrow=c(1,2))
boxplot2(GEMS.rxnXPSID ~ fGlobalCT.m,col=cols,ylim=c(0,max(GEMS.rxnXPSID)),
ylab="N° reactions in the model",las=2)
vioplot(GEMS.rxnXPSID,col="Grey",names = "ALL",ylim=c(0,max(GEMS.rxnXPSID)))
par(mfrow=c(1,1))
#2bis: How many n° genes per model?
GEMS.geneXPSID <- apply(geneInclMat==1,2,sum) #geneInclMat=1 indicates presence of the rxn in the model, 0 otherwise
par(mfrow=c(1,2))
boxplot2(GEMS.geneXPSID ~ fGlobalCT.m,col=cols,ylim=c(0,max(GEMS.geneXPSID)),
ylab="N° genes in the model",las=2,names=toupper(levels(fGlobalCT.m)))
vioplot(GEMS.geneXPSID,col="Grey",names = "ALL",ylim=c(0,max(GEMS.geneXPSID)))
par(mfrow=c(1,1))
#3: How many models have a given rxn?
nModelsXRxn      <- apply(rxnInclMat==1,1,sum)
nModelsXRxn.perc <- nModelsXRxn/ncol(rxnInclMat)
barplot(nModelsXRxn.perc[order(nModelsXRxn.perc)],names.arg = NA,border=NULL,
xlab="HMR2 reactions", ylab="Fraction of models with the reaction")
# #3bis: When does the fraction of models with a given rxn flattens?
# l          <- lowess(nModelsXRxn.perc[order(nModelsXRxn.perc)],f=1/50)
# lines(l,col="green")
# derivative <- l$x
# slope.diff <- l$x
# for (i in 2:length(nModelsXRxn.perc)){
#   derivative[i] <- (l$y[i]-l$y[i-1])/(l$x[i]-l$x[i-1])
#   if (i==2){next}
#   slope.diff[i] <- abs(derivative[i]-derivative[i-1])}
# slope.diff[1:length(nModelsXRxn.perc)*0.9] <-0
# nModelsXRxn.perc.opt <- l$y[which.max(slope.diff)]
# abline(h=nModelsXRxn.perc.opt,col="red")
#4: How many rxns are declared core or context given a threshold for presence in x% of the models?
percsSampleWRxns <- c(seq(0.5,0.90,by = 0.05),
seq(0.91,0.99,by = 0.01),
seq(0.991,1,by = 0.001))
nRxnsClassified  <- matrix(0,nrow=3,ncol=length(percsSampleWRxns),
dimnames=list(c("N°core","N°context","N°absent"),
paste0("Core@",percsSampleWRxns)))
for (perc in percsSampleWRxns){
rxns.core       <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc>perc]),])
rxns.context    <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc<=perc&nModelsXRxn.perc>0]),])
rxns.abs        <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc==0]),])
nRxnsClassified[,paste0("Core@",perc)] <- rbind(nrow(rxns.core),
nrow(rxns.context),
nrow(rxns.abs))}
barplot(nRxnsClassified,beside = F,las=2,ylab="N° rxns per group")
#5: Establish classification - Let's settle for 0.95
rxns.core <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc>percSampleWRxns]),],"Type"="Core")
rxns.cntx <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc<=percSampleWRxns&nModelsXRxn.perc>0]),],"Type"="Pan","Class"="Facultative")
rxns.absn <- data.frame(HMR2.rxnTable[HMR2.rxnTable[,"Eq"]%in%names(nModelsXRxn.perc[nModelsXRxn.perc==0]),],"Type"="Pan","Class"="Absent")
#6: Bootstrap statistics
nbootstraps <- 1000
n.core    <- function(modelsxrxn,i) sum(modelsxrxn[i]>percSampleWRxns)
n.core.bs <- boot(nModelsXRxn.perc,statistic = n.core,R = nbootstraps)
n.core.ci <- boot.ci(n.core.bs,type="basic")
n.cntx    <- function(modelsxrxn,i) sum(modelsxrxn[i]<percSampleWRxns & modelsxrxn[i]>0)
n.cntx.bs <- boot(nModelsXRxn.perc,statistic = n.cntx,R = nbootstraps)
n.cntx.ci <- boot.ci(n.cntx.bs,type="basic")
n.absn    <- function(modelsxrxn,i) sum(modelsxrxn[i]==0)
n.absn.bs <- boot(nModelsXRxn.perc,statistic = n.absn,R = nbootstraps)
n.absn.ci <- boot.ci(n.absn.bs,type="basic")
install.packages("vioplot", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
n.core.ci
n.core
n.core.bs$t0
head(nModelsXRxn.perc)
percSampleWRxns
min.ntissues
ompare core-pan with housekeeping proteome, core-iso with tissue-enriched proteome,
#and cntx-clust with group enriched proteome
rm(list=ls())
setwd("~/Documents/Academia/Projects/RxnLands/Codes/analyzeGEMs/CompareToNormal")
require(VennDiagram)
require(gplots)
require(RColorBrewer)
#Load
load("../../data/annotation.RData")
load("../../data/preprocessed.RData")
absn       <- read.delim("../RxnsCoreVsPan/rxns_absn.txt",stringsAsFactors=F)
absn <- absn$RxnID
cntx_clust <- readLines("../RxnsCoreVsPan/rxns_cntx_clust.txt")
core_pan   <- readLines("../RxnsCoreVsPan/rxns_core_pan.txt")
core_iso   <- readLines("../RxnsCoreVsPan/rxns_core_iso.txt")
hpa.hk     <- read.delim("../../data/tissue_specificity_rna-any_expressed.tab",stringsAsFactors=F)
hpa.mix    <- read.delim("../../data/tissue_specificity_rna-any_Mixed.tab",stringsAsFactors=F)
hpa.all    <- read.delim("../../data/rna.csv",stringsAsFactors=T,sep = ",")
HMR2.gpr   <- read.delim("../../docs/cHMR3765_rxnGeneMatrix.txt")
rownames(HMR2.gpr)<-HMR2.gpr[,1]
HMR2.gpr    <- HMR2.gpr[,-c(1,ncol(HMR2.gpr))]
geneIncMatFile    <- c("../geneInclMat.txt")
geneInclMat       <- read.delim(geneIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
HMR2.rxnTable <- read.delim("../../data/cHMR3765_rxnTable.txt",stringsAsFactors=F)
geneInclMat   <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
metgenes.EC   <- readLines("../../docs/ECdefinedMetGenes_HMR3765.txt")
rxnIncMatFile     <- c("../rxnInclMat.txt")
rxnInclMat        <- read.delim(rxnIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
rxnInclMat  <- rxnInclMat[,-grep("X.1",colnames(rxnInclMat))]
#Param
percSampleWRxns          <- 0.95
arbitrary.threshold.rank <- 10
maxngpr.rxnint           <- 1
hpa.core.defin           <- "both"
#1: Preprocess
PSID.m        <- colnames(geneInclMat)
lib.size          <- with(y$samples, lib.size * norm.factors)
E                 <- t(log2(t(y$counts + 0.5)/(lib.size + 1) * 1e+06))
E.ensg            <- E
colnames(E.ensg)  <- gsub(pattern="-",replacement=".",x=colnames(E.ensg))
rownames(E.ensg)  <- annotEntrez[rownames(E),"ensembl_gene_id"]
genes.ensg.common <- intersect(rownames(E.ensg),rownames(geneInclMat)) #This is the reference metabolic genome
geneInclMat.c     <- geneInclMat[genes.ensg.common,]
genes.ensg.m      <- rownames(geneInclMat.c[which(apply(geneInclMat.c!=0,1,any)),])
E.ensg.c          <- E.ensg[genes.ensg.common,] #n common genes x nS (1082)
PSID         <- rownames(y$samples)
PSID.s       <- gsub(pattern="-",replacement=".",x=PSID)
filter       <- PSID.s%in%colnames(geneInclMat)
mapper       <- match(colnames(geneInclMat),PSID.s[filter])
E.ensg.c.m   <- E.ensg.c[,filter][,mapper] #n common genes x nS in models (917)
###Above: the reference genome for the reconstructed models
#3: Classify HPA proteins
hpa.tissues    <- levels(hpa.all$Sample)[!grepl("[A-Z]",
levels(hpa.all$Sample))]
hpa.onlytissue <- hpa.all[hpa.all$Sample %in% hpa.tissues,]
hpa.abundxgene <- aggregate(Abundance~Gene,data=hpa.onlytissue,FUN = table,simplify = T)
min.ntissues   <- length(hpa.tissues)*(1-percSampleWRxns)
?varSelRF
require(varSelRF)
install.packages("varSelRF", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
varSelRF
require(varSelRF)
?varSelRF
###Characterize contextual rxns
rm(list=ls())
setwd("~/Documents/Academia/Projects/RxnLands/Codes/analyzeGEMs/RxnsCoreVsPan")
library(brglm)
require(ConsensusClusterPlus)
require(lmtest)
library(gplots)
library(ggplot2)
library(RColorBrewer)
require(reshape2)
require(varSelRF)
#Param
sign.lev        <- 0.01
min.FC          <- log2(0.5)
percSampleWRxns <- 0.95
sign.ct         <- 0.001
minFSampleXMut  <- 0.10
#Load data
load("../../data/annotation.RData")
load("../../data/preprocessed.RData")
rxnIncMatFile     <- c("../rxnInclMat.txt")
rxnInclMat        <- read.delim(rxnIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
rxnInclMat  <- rxnInclMat[,-grep("X.1",colnames(rxnInclMat))]
geneIncMatFile    <- c("../geneInclMat.txt")
geneInclMat       <- read.delim(geneIncMatFile,header=T,sep="\t",row.names=1,allowEscapes=T)
geneInclMat <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
HMR2.gpr          <- read.delim("../../docs/cHMR3765_rxnGeneMatrix.txt")
rownames(HMR2.gpr)<-HMR2.gpr[,1]
HMR2.gpr      <- HMR2.gpr[,-c(1,ncol(HMR2.gpr))]
HMR2.rxnTable <- read.delim("../../data/cHMR3765_rxnTable.txt",stringsAsFactors=F)
cntx.rxns     <- read.delim("rxns_cntx.txt",stringsAsFactors=F)
#1: Preprocess
PSID.m        <- colnames(rxnInclMat)
lib.size          <- with(y$samples, lib.size * norm.factors)
E                 <- t(log2(t(y$counts + 0.5)/(lib.size + 1) * 1e+06))
E.ensg            <- E
colnames(E.ensg)  <- gsub(pattern="-",replacement=".",x=colnames(E.ensg))
rownames(E.ensg)  <- annotEntrez[rownames(E),"ensembl_gene_id"]
genes.ensg.common <- intersect(rownames(E.ensg),rownames(geneInclMat))
geneInclMat.c <- geneInclMat[genes.ensg.common,]
E.ensg.c      <- E.ensg[genes.ensg.common,] #n common genes x nS (1082)
HMR2.gpr.num  <- as.matrix(HMR2.gpr)
#2: Create a factor
PSID         <- rownames(y$samples)
PSID.s       <- gsub(pattern="-",replacement=".",x=PSID)
filter       <- PSID.s%in%colnames(rxnInclMat)
mapper       <- match(colnames(rxnInclMat),PSID.s[filter])
fGlobalCT.m  <- fGlobalCT[filter][mapper]
names(fGlobalCT.m)  <- PSID.s[filter][mapper]
fMuts.f      <- fMuts[filter,]
fMuts.m      <- fMuts.f[mapper,]
mut          <- data.matrix(data.frame(fMuts.m))-1
mut.freq     <- mut[,apply(mut,2,sum)>minFSampleXMut*nrow(mut)]
E.ensg.c.m   <- E.ensg.c[,filter][,mapper] #n common genes x nS in models (917)
cols         <- colorRampPalette(brewer.pal(12, "Set3"))(nlevels(fGlobalCT.m))
names(cols)  <- levels(fGlobalCT.m)
colScale     <- scale_fill_manual(values = cols)
#3: Example for gpr expression in core rxns
### Normalize gene inclusion matrix with read count matrix
E.ensg.c.zerneg             <- E.ensg.c
E.ensg.c.zerneg[E.ensg.c<0] <- 0
cols5 <- brewer.pal(5,"Set2")
###Example: cntx rxn
rxn.ex             <- "HMR_1037"
rxn.ex.genes       <- colnames(HMR2.gpr.num)[which(HMR2.gpr.num[rxn.ex,]!=0)]
rxn.ex.genes.hgnc  <- annotEntrez[match(rxn.ex.genes,annotEntrez[,"ensembl_gene_id"]),"hgnc_symbol"]
rxn.ex.gene.sort   <- sort.int(E.ensg.c.zerneg[rxn.ex.genes[1],],index.return = T)
barplot(E.ensg.c.zerneg[rxn.ex.genes,rxn.ex.gene.sort$ix],beside=F,las=2,
col=cols5,legend.text = rxn.ex.genes.hgnc,horiz=T,
main=HMR2.rxnTable[HMR2.rxnTable[,"RxnID"]==rxn.ex,"Eq"],
xlab="Size-corrected log-cpm")
#4: How are the cntx rxns scattered across models?
# rxnInclMat.cntx   <- rxnInclMat[match(rownames(rxnInclMat),cntx.rxns$Eq)
#                                 [!is.na(match(rownames(rxnInclMat),cntx.rxns$Eq))],]
# hm  <- heatmap.2(as.matrix(rxnInclMat.cntx),Rowv = T,Colv = T,symm = F,
#                  scale="none",col=c("White","Black"),density.info="none",
#                  trace="none",labCol=NA,labRow=NA)
#4: Test if presence of a cntx in a model is attributable to a certain factor ~10'
if (!file.exists("rxns_cntx_inclusiontestres.RData")){
p.incl     <- matrix(nrow=nrow(cntx.rxns),ncol=5,
dimnames=list(cntx.rxns$RxnID,c("pMut","pCT","AICmut","AICct","AICnull")))
k <- 0
for (rxn in cntx.rxns$RxnID){
k <- k+1
print(paste0("Doing ",k,"/",length(cntx.rxns$RxnID)))
rxn.eq           <- HMR2.rxnTable[HMR2.rxnTable$RxnID==rxn,"Eq"]
### Test with a linear model if inclusion goes with ct or mut
fit.mut          <- brglm(as.numeric(rxnInclMat[rxn.eq,])~fGlobalCT.m+mut.freq)
fit.ct           <- update(fit.mut, ~.- mut.freq)
test.mut         <- lrtest(fit.ct,fit.mut)
fit.null         <- update(fit.ct, ~.- fGlobalCT.m)
test.ct          <- lrtest(fit.null,fit)
p.incl[rxn,]     <- c(test.mut$"Pr(>Chisq)"[2],test.ct$"Pr(>Chisq)"[2],
fit.mut$aic,fit.ct$aic,fit.null$aic)}} else {
load("rxns_cntx_inclusiontestres.RData")}
###Sort
p      <- p.incl[,c("pMut","pCT")]
p.adj  <- apply(p,2,p.adjust,"fdr")
p.sort <- p.adj[order(p.adj[,"pCT"]),]
###Compute for interesting rxns the fraction in which a ct is represented (where p < 0.01)
cntx.rxns.int  <- cntx.rxns[p.adj[,"pCT"] < sign.ct,]
cntx.rxns.nxct <- matrix(0,nrow=nlevels(fGlobalCT.m),ncol=dim(cntx.rxns.int)[1],
dimnames=list(levels(fGlobalCT.m),cntx.rxns.int$Eq))
k <- 0
for (rxn in cntx.rxns.int$Eq){
k <- k+1
print(paste0("Doing: #",k))
a <- t(rxnInclMat[rxn,])
rxn.inter.sumXFactor <- aggregate(a~fGlobalCT.m,FUN = sum,simplify = T)
cntx.rxns.nxct[,rxn] <- rxn.inter.sumXFactor[,rxn]
#   barplot(rxn.inter.sumXFactor[,2]/table(fGlobalCT.m),names.arg = rxn.inter.sumXFactor[,1] ,
#           las=2,main=rxn,ylim = c(0,1))
}
cntx.rxns.fracxct <- t(sweep(cntx.rxns.nxct,1,table(fGlobalCT.m),"/"))
###Consensus clustering on the partitioning of a reaction among ct
ccp     <- ConsensusClusterPlus(cntx.rxns.fracxct,maxK=5,reps=1000,pItem=0.8,pFeature=1,
title="Fraction of models with the reaction",clusterAlg="hc",
distance="pearson",
seed=1262118388.71279,plot=NULL)
?ConsensusClusterPlus
###Classify GEMs based on incl of core and cntx genes
rm(list=ls())
setwd("~/Documents/Academia/Projects/RxnLands/Codes/validateGEMs/")
library(ggplot2)
library(RColorBrewer)
source("performRFongenexpr.R")
source("performRFongenexpronlyT.R")
#1: Load data
##Gene expression and annotation
load("~/Documents/Data/annotation.RData")
genes <- unique(annotEntrez$ensembl_gene_id)
##Classifying genes: core only in T and cntx across T clusters
core.genes.onlyT  <- readLines("../analyzeGEMs/CompareToNormal/genes_core_onlyincancer.txt")
cntx.rxns.forcls  <- readLines("../analyzeGEMs/RxnsCoreVsPan/rxns_cntx_clust.txt")
###Find gene associated with cntx rxns
HMR2.gpr   <- read.delim("../docs/cHMR3765_rxnGeneMatrix.txt")
rownames(HMR2.gpr)<-HMR2.gpr[,1]
HMR2.gpr  <- HMR2.gpr[,-c(1,ncol(HMR2.gpr))]
cntx.genes.forcls <- c()
for (rxn in cntx.rxns.forcls){
rxn.ex.genes     <- colnames(HMR2.gpr)[apply(HMR2.gpr[rxn,]!=0,2,any)]
rxn.ex.genes     <- rxn.ex.genes[rxn.ex.genes %in% genes]
cntx.genes.forcls <- c(cntx.genes.forcls,rxn.ex.genes)}
cntx.genes.forcls <- unique(cntx.genes.forcls)
###Translate to entrez
core.genes.onlyT  <- rownames(annotEntrez[annotEntrez$ensembl_gene_id%in%core.genes.onlyT,])
cntx.genes.forcls <- rownames(annotEntrez[annotEntrez$ensembl_gene_id%in%cntx.genes.forcls,])
#1: Choose genes to use to classify
genes.sel <- cntx.genes.forcls
#2: Get expression data and limit to selected genes
load("~/Documents/Academia/Projects/MutLands/ProjectCodes/MutLands/validateResults/preprocessed_val.RData")
E.T  <- y$E
ct.T <- ctfactor
genes.sel <- genes.sel[genes.sel %in% rownames(E.T)]
data      <- t(E.T[genes.sel,])
#3: Annotate sample for cluster and status
CTcl.T <- as.character(ct.T)
CTcl.T[CTcl.T=="lgg" | CTcl.T == "gbm"] <- "lgg - gbm"
CTcl.T[CTcl.T=="ucec" | CTcl.T == "ov"] <- "ucec - ov"
CTcl.T[CTcl.T=="kirc" | CTcl.T == "paad" |
CTcl.T == "read" | CTcl.T == "coad"] <- "ki-pa-re-co"
CTcl.T[CTcl.T=="lusc" | CTcl.T == "luad" |
CTcl.T == "blca" | CTcl.T == "brca" |
CTcl.T == "hnsc"] <- "lu-bl-br-hn"
CTcl   <- factor(CTcl.T)
#3: Split data into train and test and run RF
table(ct.T)
summary(table(ct.T))
summary(summary(table(ct.T)))
summary(summary(table(ct.T))
summary(table(ct.T)[1])
summary(table(ct.T)[1:13])
