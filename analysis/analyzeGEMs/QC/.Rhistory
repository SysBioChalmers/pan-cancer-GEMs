setwd("~/Box Sync/3rd Semester (May 2013 - November 2013)/Projects/RxnLands/Codes/analyzeGEMs/QC")
load("../../data/preprocessed.RData")
geneInclMat <- read.delim("geneInclMat.txt",header=T,sep="\t",row.names=1,allowEscapes=T)
geneInclMat <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
geneInclMat <- read.delim("../geneInclMat.txt",header=T,sep="\t",row.names=1,allowEscapes=T)
geneInclMat <- geneInclMat[,-grep("X.1",colnames(geneInclMat))]
model.summary <- read.delim("../INITmodelSummary.txt",row.names="PSID")
# Normalize gene inclusion matrix with read count matrix
E.ensg           <- E
colnames(E.ensg) <- gsub(pattern="-",replacement=".",x=colnames(E.ensg))
rownames(E.ensg) <- annotEntrez[rownames(E),"ensembl_gene_id"]
genes.ensg.common <- intersect(rownames(E.ensg),rownames(geneInclMat))
geneInclMat.c     <- geneInclMat[genes.ensg.common,]
E.ensg.c          <- E.ensg[genes.ensg.common,]
lib.size          <- with(y$samples, lib.size * norm.factors)
E                 <- t(log2(t(y$counts + 0.5)/(lib.size + 1) * 1e+06))
E.ensg            <- E
colnames(E.ensg)  <- gsub(pattern="-",replacement=".",x=colnames(E.ensg))
rownames(E.ensg)  <- annotEntrez[rownames(E),"ensembl_gene_id"]
load("../../data/annotation.RData")
rownames(E.ensg)  <- annotEntrez[rownames(E),"ensembl_gene_id"]
genes.ensg.common <- intersect(rownames(E.ensg),rownames(geneInclMat))
geneInclMat.c     <- geneInclMat[genes.ensg.common,]
E.ensg.c          <- E.ensg[genes.ensg.common,]
# Boxplots for gene In vs counts for 6 random models
random          <- sample(x=1:dim(geneInclMat)[2],6,F)
PSID.example    <- colnames(geneInclMat)[random]
par(mfrow=c(2,3))
for (PSID in PSID.example){
boxplot(E.ensg.c[,PSID]~geneInclMat.c[,PSID],col=c("Dark Red","Dark Blue"),
names=c("ExcludedGenes","IncludedGenes"),ylab="Normalized log-cpm",
main=PSID)}
require(rpart)
# Boxplots and ecdf for gene In vs counts in all models
included <- c()
excluded <- c()
k <- 0
for (PSID in colnames(geneInclMat)){
k <- k+1
print(k)
included <- c(included,
as.vector(as.matrix(E.ensg.c[,PSID]))[geneInclMat.c[,PSID]==1])
excluded <- c(excluded,
as.vector(as.matrix(E.ensg.c[,PSID]))[geneInclMat.c[,PSID]==0])
}
boxplot(c(excluded,included)~c(rep(0,length(excluded)),rep(1,length(included))),
col=c("Dark Red","Dark Blue"),
names=c("ExcludedGenes","IncludedGenes"),ylab="Normalized log-cpm",
main="All Models")
par(mfrow=c(1,1))
boxplot(c(excluded,included)~c(rep(0,length(excluded)),rep(1,length(included))),
col=c("Dark Red","Dark Blue"),
names=c("ExcludedGenes","IncludedGenes"),ylab="Normalized log-cpm",
main="All Models")
label  <- as.factor(c(rep(0,length(excluded)),rep(1,length(included))))
table(label)
status  <- as.factor(c(rep(0,length(excluded)),rep(1,length(included))))
logcpms <- c(excluded,included)
boxplot(logcpms ~ status,
col=c("Dark Red","Dark Blue"),
names=c("ExcludedGenes","IncludedGenes"),ylab="Normalized log-cpm",
main="All Models")
included_ecdf <- ecdf(included)
out <- rpart(status ~ logcpms)
fit <- out
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for Rxn Inclusion")
plot(fit)
printcp(fit)
plotcp(fit)
summary(fit)
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for Kyphosis")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
plot(pfit, uniform=TRUE, main="Pruned Classification Tree for Gene Inclusion")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
pfit
pfit$parms
pfit$frame
pfit$where
pfit$terms
pfit$cptable
pfit$splits
pfit$ordered
pfit$y
pfit$numresp
pfit$control
pfit$variable.importance
str(pfit)
str(dit)
str(fit)
boxplot(logcpms ~ status,
col=c("Dark Red","Dark Blue"),
names=c("ExcludedGenes","IncludedGenes"),ylab="Normalized log-cpm",
main="All Models")
abline(h=sep,col="black",lwd=2)
sep  <- 1.609
abline(h=sep,col="black",lwd=2)
2^sep
quantile(included)
2^4
quantile(included,probs = 0:0.1:1)
quantile(included,probs = 0.1)
quantile(included,probs = 1/10)
quantile(included,probs = 0:1/10:10)
quantile(included,probs = 0:1/10:100)
quantile(included,probs = 0:10:100)
quantile(included,probs = seq(0,1,10)
)
quantile(included,probs = seq(0,1,by = 0.1)
)
2^quantile(included,probs = seq(0,1,by = 0.1))
