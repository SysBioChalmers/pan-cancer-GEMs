?write.table
write.table(x,file="randGenesInd.txt",sep"\n")
write.table(x,file="randGenesInd.txt",sep="\n")
# Generate random vectors
x <- sample(1:3558,54)
write.table(x,file="randGenesInd.txt",sep="\n")
# Generate random vectors
x <- sample(1:3558,54)
write.table(x,file="randGenesInd.txt",sep="\n",row.names=FALSE)
# Generate random vectors
x <- sample(1:3558,54)
write.table(x,file="randGenesInd.txt",sep="\n",row.names=FALSE,col.names=FALSE)
q()
library(vcd)
install.packages(vcd)
vcd
?chisq.test
contTable <- c(10,15)
conT
contTable
contTable <- c("10,15")
contTable
[8 9]
c(8 9,10 14)
c(8,9;10,14)
?c
?matrix
matrix(8 9)
matrix(8)
matrix[1,2] <- 15
m[1,2] <- 15
m <-0
m[1,2] <- 15
m <- matrix(nrow=4,ncol=2)
m[,1] <- c(10 5 8 6)
m[,1] <- c(10,5,8,6)
m
m[,2] <- c(15,2,8,11)
m
chisq.test(m)
?fisher.test
fisher.test(m)
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
citation("edgeR")
library(FactoMineR)
citation(FactoMineR::)
citation(FactoMineR)
citation(package=FactoMineR::)
install.packages("relations")
install.packages("relations",type="source")
library("relations")
source("http://bioconductor.org/biocLite.R")
biocLite("piano")
?chisq.test
x <- as.matrix(c(179,33;2,3))
?c
x <- matrix(c(179,33,2,3),nrow=2,ncol=2)
x
chisq.test(x)
fisher.test(x)
y <- matrix(c(172,11,3,1),nrow=2,ncol=2)
y
fisher.test(y)
install.packages(ade4)
install.packages("ade4")
library(ade4)
data(deug)
deug
deug.dudi <- dudi.pca(deug$tab,center=FALSE,scale=FALSE,scan=FALSE)
?par
par(mfrow=c(2,2))
s.class(deug.dudi$li, deug$result,cpoint=1)
deug.dudi <- dudi.pca(deug$tab,center=T,scale=FALSE,scan=FALSE)
s.class(deug.dudi$li, deug$result,cpoint=1)
deug.dudi <- dudi.pca(deug$tab,center=deug$cent,scale=FALSE,scan=FALSE)
s.class(deug.dudi$li, deug$result,cpoint=1)
?coul
coul = c("black","red","green","blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","red","green","blue","grey","orange")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","red","green","blue","grey","light blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","red","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark red","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark orange","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark red","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark red","green","blue","grey","light purple")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark red","green","blue","grey","purple")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","dark orange","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
coul = c("black","orange","green","blue","grey","dark blue")
s.class(deug.dudi$li, deug$result,cpoint=1,col = coul)
170217.2/60
170217.2/3600
100/1300
100/1600
300/1400
2200-1150
1050/2200
f = range(0,1)
f = range(0,1,0.01)
f
f = seq(0,1,0.01)
Dgln = 7.7*(1+f)-6.25*f
plot(f,Dgln)
?plot
plot(f,Dgln,type="l")
plot(f,Dgln,type="l",col="red")
plot(f,Dgln,type="l",col="red")
DglnGlu = 21.4*(1+f)-47.7*f
line(f,DglnGlu,type="l",col="blue")
line(f,DglnGlu,col="blue")
line(f,DglnGlu)
lines(f,DglnGlu,col="blue")
plot(f,Dgln,type="l",col="red",ylim=(0,100))
plot(f,Dgln,type="l",col="red",ylim=c(0,100))
lines(f,DglnGlu,col="blue")
library(utils)
mdacc <- local({
rvers <- getRversion()
repos.hostname <-"bioinformatics.mdanderson.org"
sprintf("http://%s/OOMPA/%s",
repos.hostname,
paste(rvers$maj, rvers$min, sep="."))
})
install.packages("estimate", repos=mdacc, dependencies=TRUE)
346/861
100/0.082
1219.5/310
0.01*760
4/24
5/24
26560*24
637440*0.1525
637440+97210
26560*4
106240*0.1525
106240*0.1525+106240
a
5/7
12/15
?lmFit
?lm
?selectMethod
library(ade4)
?pca
?ade4
library(randomForest)
library(estimate)
?estimate
434/494
30*24
68*16
720/68
source("http://bioconductor.org/biocLite.R")
biocLite("BioNet")
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("synapseClient")
#Write circos file based on mut-met gene association
rm(list=ls())
require(limma)
require(gplots)
require(piano)
require(RColorBrewer)
require(synapseClient)
synapseLogin("gatto@chalmers.se","forre$ter1867")
#Load
annotation.file <- synGet("syn3168036")
load(annotation.file@filePath)
mutGeneMat.met.file    <- synGet("syn3192396")
mutGeneMatrix.met.sign <- read.delim(mutGeneMat.met.file@filePath)
metgenes.file   <- synGet("syn3192387")
metgenes        <- readLines(metgenes.file@filePath)
araxannot.file  <- synGet("syn3240888")
arax.annot      <- read.delim(araxannot.file@filePath,
sep="\t",stringsAsFactors=F)
writeheatm  <- synGet("syn3308147")
source(writeheatm@filePath)
writehist  <- synGet("syn3308156")
source(writehist@filePath)
#Parameters
convergence.cutoff <- 1 #Maximum n° of converging mutation to the gene to be shown
simplified         <- T
suffix             <- ifelse(simplified,"_simple","")
#1: Sort associations by number of converging mutations
mut.sort   <- sort.int(apply(mutGeneMatrix.met.sign!=0,2,sum),decreasing=T,index.return=T)
gene.sort  <- sort.int(apply(mutGeneMatrix.met.sign!=0,1,sum),decreasing=T,index.return=T)
mutGeneMatrix.met.sign.sort <- mutGeneMatrix.met.sign[gene.sort$ix,mut.sort$ix]
mutFactors <- paste0("metadata",colnames(mutGeneMatrix.met.sign.sort)) #This is done for retro compatibility
colnames(mutGeneMatrix.met.sign.sort) <- mutFactors
#2: Filter convergence lower than cutoff
mutGeneMatrix.met.sign.sort <- mutGeneMatrix.met.sign.sort[
apply(mutGeneMatrix.met.sign.sort!=0,1,sum)>=convergence.cutoff,]
#3: Choose drawing settings
genes.maxSize <- 1000
muts.maxSize  <- apply(mutGeneMatrix.met.sign.sort!=0,2,sum)
ribbonScale   <- 0.5
col           <- paste0("set3-12-qual-",1:length(mutFactors))
names(col)    <- paste0("metadata",colnames(mutGeneMatrix.met.sign))#[sample(1:12,12,F)] #Assign colors randomly
#4: Write karyotype file
filename.k <- paste0("../circos/data/karyotype_mutations_allMets",suffix,".txt")
if (file.exists(filename.k){file.remove(filename.k)}
file.karyo <- file(filename.k,"a+")
for (mutFactor in mutFactors){
string <- paste("chr","-",mutFactor,substring(mutFactor,9),0,muts.maxSize[mutFactor],col[mutFactor],sep="\t")
writeLines(string,file.karyo)}
for (gene in rownames(mutGeneMatrix.met.sign.sort)){
if (gene!="3417"){#Skip IDH1
gene.hgnc <- annotEntrez[gene,"hgnc_symbol"] #Get gene hgnc_symbol
if (gene.hgnc==""){gene.hgnc<-annotEntrez[gene,"ensembl_gene_id"]} #If unavailable, use ensembl
if (simplified){ #Same size for each gene
string <- paste("chr","-",gene,gene.hgnc,0,genes.maxSize,"grey",sep="\t")
} else { #Size proportional to convergence
string <- paste("chr","-",gene,gene.hgnc,0,genes.maxSize*sum(mutGeneMatrix.met.sign.sort[gene,]!=0),"grey",sep="\t") #Scale according to convergence
}
writeLines(string,file.karyo)}}
close(file.karyo)
if (file.exists(filename.k)){file.remove(filename.k)}
file.karyo <- file(filename.k,"a+")
setwd("~/Box Sync/3rd Semester (May 2013 - November 2013)/Projects/RxnLands/Codes/analyzeGEMs/RxnsCoreVsPan")
load("ncorevscntx_randommodels.RData")
head(stats)
require(gplots)
summary(stats)
fracModels  <- 0.95
nRandModels <- 917
fracModels*nRandModels
(1-fracModels)*nRandModels
quantile(stats,0:1/10:1)
quantile(stats,0:1/21:1)
quantile(stats[,1],0:1/21:1)
quantile(stats[,1],seq(0,1,1/21))
quantile(stats[,1],seq(0,1,1/20))
apply(stats,2,quantile,seq(0,1,1/20))
require(gplots)
n <- quantiles["50%",c("nCoreRxns","nCntxRxns","nAbsnRxns")]
quantiles <- apply(stats,2,quantile,seq(0,1,1/20))
n <- quantiles["50%",c("nCoreRxns","nCntxRxns","nAbsnRxns")]
n
n.l <- quantiles["5%",c("nCoreRxns","nCntxRxns","nAbsnRxns")]
n.u <- quantiles["95%",c("nCoreRxns","nCntxRxns","nAbsnRxns")]
barplot2(n,horiz=F,beside=T,las=2,names.arg = c("Core","Contextual","Absent"),
ci.l =n.l,ci.u =n.u,
col = brewer.pal(length(n),"RdBu")[c(1,3,2)],
ylab="N° reactions",plot.ci=T,
legend.text=F,ylim=c(0,4000))
require(RColorBrewer)
# Parameters
fracModels  <- 0.95
nRandModels <- 917
nPerms      <- 1:1000
barplot2(n,horiz=F,beside=T,las=2,names.arg = c("Core","Contextual","Absent"),
ci.l =n.l,ci.u =n.u,
col = brewer.pal(length(n),"RdBu")[c(1,3,2)],
ylab="N° reactions",plot.ci=T,
legend.text=F,ylim=c(0,4000))
barplot2(n,horiz=F,beside=T,las=2,names.arg = c("Core","Contextual","Absent"),
ci.l =n.l,ci.u =n.u,
col = brewer.pal(length(n),"RdBu")[c(1,3,2)],
ylab="N° reactions",plot.ci=T,
legend.text=F,ylim=c(0,7000))
display.brewer.all()
display.brewer.all()
barplot2(n,horiz=F,beside=T,las=2,names.arg = c("Core","Contextual","Absent"),
ci.l =n.l,ci.u =n.u,
col = brewer.pal(length(n),"Greys")[c(1,3,2)],
ylab="N° reactions",plot.ci=T,
legend.text=F,ylim=c(0,7000))
barplot2(n,horiz=F,beside=T,las=2,names.arg = c("Core","Contextual","Absent"),
ci.l =n.l,ci.u =n.u,
col = brewer.pal(length(n),"Greys")[c(3,2,1)],
ylab="N° reactions",plot.ci=T,
legend.text=F,ylim=c(0,7000))
